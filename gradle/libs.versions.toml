# "group:name:version:classifier@extension"
# For the given regular declaration:
# dependencies {
#     implementation "com.mygroup:my-artifact:1.0.0:debug@aar"
# }
# In `TOML`
# [libraries]
# myDependency = { module = "com.mygroup:my-artifact", version = "1.0.0" }
# In `build.gradle.kts`
# dependencies {
#     implementation(libs.myDependency) {
#         artifact {
#             classifier = 'debug'
#             type = 'aar'
#         }
#     }
# }

[versions]
#===================
#===== Project =====
#===================
# @keep
compile-sdk = "36"
# @keep
min-sdk = "25"
# @keep
target-sdk = "36"
# @keep
# ndk-sdk = "25.2.9519653"

# @keep
versionName = "1.0.5"
# @keep
versionCode = "105"

# @keep
leo-version = "5.12.83"

#===================
#===== Compile =====
#===================
agp = "8.11.1"
kotlin = "2.2.0"
ksp = "2.2.0-2.0.2"
#kotlin-language = "2.1"
#kotlin-api = "2.1"

javaVersion = "17"
jvmVersion = "17"

# Compose Compiler & Kotlin versions
# https://androidx.dev/storage/compose-compiler/repository
# https://developer.android.com/jetpack/androidx/releases/compose-kotlin?hl=zh-cn

#=================================
#===== Android dependencies ======
#=================================
compose-bom = "2025.08.00"
compose-activity = "1.10.1"
compose-navigation = "2.9.3"
#compose-constraintlayout= "1.0.1"

hilt = "2.57"
hilt-navigation-compose = "1.2.0"
core-ktx = "1.17.0"
lifecycle = "2.9.2" # https://stackoverflow.com/a/78490417/6091500
multidex = "2.0.1"
coroutines = "2.0.21-coroutines-KBA-001"
#annotation = "1.9.0"

#=======================
#===== Third party =====
#=======================
mars-xlog = "1.2.6"
karn-notify = "1.4.0"
#xx-permissions = "18.63"
net = "3.7.0"
coil = "2.7.0"
square-okhttp = "5.1.0"
serialization-json = "1.9.0"
colorful-slider = "1.2.2"
#lottie-compose = "6.1.0"

#=======================
#======= Helper ========
#=======================
detekt = "1.23.8"
#dokka = "1.7.10"
ktlint = "1.6.0"
ktlint-gradle = "13.0.0"
benmanes = "0.52.0"
jacoco = "0.8.9"
# Ensure the SonarQube is compatible with the server version.
sonarqube = "6.2.0.5505" # 4.2.0.3129

#================
#===== Test =====
#================
compose-runtime-tracing = "1.9.0"
#tracing-perfetto = "1.0.0"
jupiter = "5.13.4" # JUnit 5
#androidx-test = "1.6.1"
androidx-test-ext = "1.3.0"
#androidx-test-runner = "1.6.2"
#androidx-test-monitor = "1.7.2"
#androidx-test-uiautomator = "2.3.0"
espresso-core = "3.7.0"
#kluent = "1.73"
#mockk = "1.13.11"
#arch = "2.2.0"
#powermock-version = "2.0.9"
#robolectric-version = "4.12.2"
mannodermaus-android-junit5 = "1.13.1.0"
mannodermaus-junit5 = "1.8.0"
#junit = "4.13.2"
#appcompat = "1.7.0"
#material = "1.12.0"

#===================#===================#===================#===================
#===================#===================#===================#===================
#===================#===================#===================#===================

[libraries]
#===================
#===== Android =====
#===================
hilt-android = { module = "com.google.dagger:hilt-android", version.ref = "hilt" }
hilt-compiler = { module = "com.google.dagger:hilt-compiler", version.ref = "hilt" }
androidx-hilt-navigation-compose = { module = "androidx.hilt:hilt-navigation-compose", version.ref = "hilt-navigation-compose" }
androidx-core-ktx = { module = "androidx.core:core-ktx", version.ref = "core-ktx" }
kotlin-coroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "coroutines" }
androidx-multidex = { module = "androidx.multidex:multidex", version.ref = "multidex" }
#ksp-symbol-processing-api = { module = "com.google.devtools.ksp:symbol-processing-api", version.ref = "ksp" }
#lifecycle-runtime-ktx = { module = "androidx.lifecycle:lifecycle-runtime-ktx", version.ref = "lifecycle" }
#androidx-annotation = { module = "androidx.annotation:annotation", version.ref = "annotation" }

#=========================
#===== Leo Libraries =====
#=========================
# Try to migrate this library to M3.
leo-androidbase = { module = "com.leovp.android:androidbase", version.ref = "leo-version" }

leo-lib-network = { module = "com.leovp.android:lib-network", version.ref = "leo-version" }
leo-lib-compose = { module = "com.leovp.android:lib-compose", version.ref = "leo-version" }

# The following FIVE libraries are already included by leo-androidbase.
#leo-log = { module = "com.leovp.android:log", version.ref = "leo-version" }
#leo-lib-json = { module = "com.leovp.android:lib-json", version.ref = "leo-version" }
#leo-lib-common-kotlin = { module = "com.leovp.android:lib-common-kotlin", version.ref = "leo-version" }

#leo-lib-common-android = { module = "com.leovp.android:lib-common-android", version.ref = "leo-version" }
#leo-lib-bytes = { module = "com.leovp.android:lib-bytes", version.ref = "leo-version" }

leo-pref = { module = "com.leovp.android:pref", version.ref = "leo-version" }

#===================
#= Android Compose =
#===================
# Implement it in the gradle convention module to access the ComposeCompilerGradlePluginExtension class
#plgn-kotlin-compose-compiler = { module = "org.jetbrains.kotlin:compose-compiler-gradle-plugin", version.ref = "kotlin" }

androidx-compose-bom = { module = "androidx.compose:compose-bom", version.ref = "compose-bom" }
androidx-material3 = { module = "androidx.compose.material3:material3" }
androidx-compose-activity = { module = "androidx.activity:activity-compose", version.ref = "compose-activity" }
androidx-compose-viewmodel = { module = "androidx.lifecycle:lifecycle-viewmodel-compose", version.ref = "lifecycle" }
androidx-lifecycle-runtime-compose = { module = "androidx.lifecycle:lifecycle-runtime-compose", version.ref = "lifecycle" }
androidx-compose-materialWindow = { module = "androidx.compose.material3:material3-window-size-class" }
androidx-navigation-compose = { module = "androidx.navigation:navigation-compose", version.ref = "compose-navigation" }
#androidx-compose-ui-graphics = { module = "androidx.compose.ui:ui-graphics" }
androidx-compose-ui-tooling-preview = { module = "androidx.compose.ui:ui-tooling-preview" }
androidx-compose-ui-tooling = { module = "androidx.compose.ui:ui-tooling" }

#androidx-compose-runtime-livedata = { module = "androidx.compose.runtime:runtime-livedata" }
#androidx-compose-material-iconsExtended = { module = "androidx.compose.material:material-icons-extended" }
#lottie-compose = { module = "com.airbnb.android:lottie-compose", version.ref = "lottie-compose" }
#androidx-constraintlayout-compose = { module = "androidx.constraintlayout:constraintlayout-compose", version.ref = "compose-constraintlayout" }
androidx-compose-ui-test-manifest = { module = "androidx.compose.ui:ui-test-manifest" }
#androidx-compose-ui-test-junit4 = { module = "androidx.compose.ui:ui-test-junit4" }

#=======================
#===== Third party =====
#=======================
mars-xlog = { module = "com.tencent.mars:mars-xlog", version.ref = "mars-xlog" }
#xx-permissions = { module = "com.github.getActivity:XXPermissions", version.ref = "xx-permissions" }
karn-notify = { module = "io.karn:notify", version.ref = "karn-notify" }
net = { module = "com.github.liangjingkanji:Net", version.ref = "net" }
#coil = { module = "io.coil-kt:coil", version.ref = "coil" }
coil-kt-compose = { module = "io.coil-kt:coil-compose", version.ref = "coil" }
square-okhttp = { module = "com.squareup.okhttp3:okhttp", version.ref = "square-okhttp" }
serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "serialization-json" }
colorful-slider = { module = "com.github.SmartToolFactory:Compose-Colorful-Sliders", version.ref = "colorful-slider" }

#=======================
#===== Helper =====
#=======================
detekt-formatting = { module = "io.gitlab.arturbosch.detekt:detekt-formatting", version.ref = "detekt" }
# https://github.com/Kotlin/dokka
#dokka-gradle-plugin = { module = "org.jetbrains.dokka:dokka-gradle-plugin", version.ref = "dokka" }
#dokka-core = { module = "org.jetbrains.dokka:dokka-core", version.ref = "dokka" }
#jacoco = { module = "org.jacoco:org.jacoco.core", version.ref = "jacoco" }

#================
#===== Test =====
#================
# implementation at your :app module
compose-runtime-tracing = { module = "androidx.compose.runtime:runtime-tracing", version.ref = "compose-runtime-tracing" }
# testImplementation
junit-jupiter-api = { module = "org.junit.jupiter:junit-jupiter-api", version.ref = "jupiter" }
# testRuntimeOnly
#junit-jupiter-engine = { module = "org.junit.jupiter:junit-jupiter-engine", version.ref = "jupiter" }
# (Optional) If you need "Parameterized Tests"
# testImplementation
junit-jupiter-params = { module = "org.junit.jupiter:junit-jupiter-params", version.ref = "jupiter" }
# testRuntimeOnly
#junit-vintage-engine = { module = "org.junit.vintage:junit-vintage-engine", version.ref = "jupiter" }
#kotlin-junit5 = { module = "org.jetbrains.kotlin:kotlin-test-junit5", version.ref = "kotlin" }
espresso-core = { module = "androidx.test.espresso:espresso-core", version.ref = "espresso-core" }
#espresso-contrib = { module = "androidx.test.espresso:espresso-contrib", version.ref = "espresso-core" }
#espresso-web = { module = "androidx.test.espresso:espresso-web", version.ref = "espresso-core" }
#espresso-intents = { module = "androidx.test.espresso:espresso-intents", version.ref = "espresso-core" }
#androidx-test-core = { module = "androidx.test:core", version.ref = "androidx-test" }
#androidx-test-core-ktx = { module = "androidx.test:core-ktx", version.ref = "androidx-test" }
#androidx-test-rules = { module = "androidx.test:rules", version.ref = "androidx-test" }
#androidx-test-runner = { module = "androidx.test:runner", version.ref = "androidx-test-runner" }
androidx-test-ext-junit = { module = "androidx.test.ext:junit", version.ref = "androidx-test-ext" }
#androidx-test-ext-junit-ktx = { module = "androidx.test.ext:junit-ktx", version.ref = "androidx-test-ext" }
#androidx-test-monitor = { module = "androidx.test:monitor", version.ref = "androidx-test-monitor" }
#androidx-test-uiautomator = { module = "androidx.test.uiautomator:uiautomator", version.ref = "androidx-test-uiautomator" }
#test-coroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "coroutines" }
#kluent-android = { module = "org.amshove.kluent:kluent-android", version.ref = "kluent" }
#mockk = { module = "io.mockk:mockk", version.ref = "mockk" }
#arch = { module = "androidx.arch.core:core-testing", version.ref = "arch" }
#powermock-junit4 = { module = "org.powermock:powermock-module-junit4", version.ref = "powermock-version" }
#powermock-core = { module = "org.powermock:powermock-core", version.ref = "powermock-version" }
#powermock-api = { module = "org.powermock:powermock-api-mockito2", version.ref = "powermock-version" }
#robolectric = { module = "org.robolectric:robolectric", version.ref = "robolectric-version" }
# androidTestImplementation
mannodermaus-junit5-core = { module = "de.mannodermaus.junit5:android-test-core", version.ref = "mannodermaus-junit5" }
# androidTestRuntimeOnly
mannodermaus-junit5-runner = { module = "de.mannodermaus.junit5:android-test-runner", version.ref = "mannodermaus-junit5" }
#junit = { group = "junit", name = "junit", version.ref = "junit" }
#appcompat = { group = "androidx.appcompat", name = "appcompat", version.ref = "appcompat" }
#material = { group = "com.google.android.material", name = "material", version.ref = "material" }

#===================#===================#===================#===================
#===================#===================#===================#===================
#===================#===================#===================#===================

[bundles]
androidx-compose = [
    #    "androidx-constraintlayout-compose",
    "androidx-compose-activity",
    "androidx-compose-viewmodel",
    #    "androidx-compose-runtime-livedata",
    "androidx-compose-materialWindow"
]

kotlin = [
    "androidx-core-ktx",
    "kotlin-coroutines",
]

test = [
    #    "kotlin-junit5",
    "junit-jupiter-api",
    "junit-jupiter-params",
    #    "mockk",
    #    "test-coroutines",
    #    "kluent-android",
    #    "arch",
    #    "robolectric"
]
android-test = [
    "junit-jupiter-api",
    #    "androidx-test-core",
    #    "androidx-test-core-ktx",
    #    "androidx-test-runner",
    "androidx-test-ext-junit",
    #    "androidx-test-ext-junit-ktx",
    #    "androidx-test-monitor",
    #    "androidx-test-uiautomator",
#    "androidx-compose-ui-test-junit4",
    "espresso-core",
    #    "espresso-contrib",
    #    "espresso-web",
    #    "espresso-intents"
]
#test-runtime-only = ["junit-jupiter-engine", "junit-vintage-engine"]
#powermock = [
#    "powermock-junit4",
#    "powermock-core",
#    "powermock-api"
#]

#===================#===================#===================#===================
#===================#===================#===================#===================
#===================#===================#===================#===================

[plugins]
# Equivalent agp - com.android.tools.build:gradle
android-application = { id = "com.android.application", version.ref = "agp" }
# Equivalent kgp - org.jetbrains.kotlin:kotlin-gradle-plugin
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
android-library = { id = "com.android.library", version.ref = "agp" }
# https://developer.android.com/develop/ui/compose/compiler?hl=zh-cn
kotlin-compose-compiler = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
kotlin-parcelize = { id = "org.jetbrains.kotlin.plugin.parcelize", version.ref = "kotlin" }
ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }
hilt = { id = "com.google.dagger.hilt.android", version.ref = "hilt" }

detekt = { id = "io.gitlab.arturbosch.detekt", version.ref = "detekt" }
ktlint-gradle = { id = "org.jlleitschuh.gradle.ktlint", version.ref = "ktlint-gradle" }
benmanes-versions = { id = "com.github.ben-manes.versions", version.ref = "benmanes" }
# vcu = { id = "nl.littlerobots.version-catalog-update", version.ref = "vcu" }
sonarqube = { id = "org.sonarqube", version.ref = "sonarqube" }
android-junit5 = { id = "de.mannodermaus.android-junit5", version.ref = "mannodermaus-android-junit5" }
